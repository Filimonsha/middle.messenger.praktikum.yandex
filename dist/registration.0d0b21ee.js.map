{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SCGO,MAAMC,EAA6B,IAAI,E,WAAAC,UAAS,uc,qEDKvD,MAAMC,EAAqB,CACzB,CACEC,MAAO,CACLC,UAAW,QACXC,cAAe,QACfC,WAAY,QACZC,KAAM,QAERC,OAAQ,CACNC,MAAKC,OAAEA,IACLC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Q,EAEtDK,OAAML,OAAEA,IACNC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Q,IAI1D,CACEP,MAAO,CACLC,UAAW,QACXC,cAAe,QAEfC,WAAY,QACZC,KAAM,QAERC,OAAQ,CACNC,MAAKC,OAAEA,IACLC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Q,EAEtDK,OAAML,OAAEA,IACNC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Q,IAI1D,CACEP,MAAO,CACLC,UAAW,MACXC,cAAe,YACfC,WAAY,MACZC,KAAM,QAERC,OAAQ,CACNC,MAAKC,OAAEA,IACLC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Y,EAEtDK,OAAML,OAAEA,IACNC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Y,IAI1D,CACEP,MAAO,CACLC,UAAW,UACXC,cAAe,aACfC,WAAY,QACZC,KAAM,QAERC,OAAQ,CACNC,MAAKC,OAAEA,IACLC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,a,EAEtDK,OAAML,OAAEA,IACNC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,a,IAI1D,CACEP,MAAO,CACLC,UAAW,UACXC,cAAe,QACfC,WAAY,QACZC,KAAM,QAERC,OAAQ,CACNC,MAAKC,OAAEA,IACLC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Q,EAEtDK,OAAML,OAAEA,IACNC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,Q,IAI1D,CACEP,MAAO,CACLC,UAAW,SACXC,cAAe,WACfC,WAAY,QACZC,KAAM,YAERC,OAAQ,CACNC,MAAKC,OAAEA,IACLC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,W,EAEtDK,OAAML,OAAEA,IACNC,EAAAC,iCAAiCC,KAAKC,KAAMJ,EAAQ,W,IAI1D,CACEP,MAAO,CACLC,UAAW,mBACXC,cAAe,WACfC,WAAY,QACZC,KAAM,cAINS,EAAY,IAAI,EAAAC,EAAAC,WAChBC,EAAc,CAClBhB,MAAO,CACLI,KAAM,SACNa,KAAM,SAERZ,OAAQ,CACNa,OAASC,IACPC,QAAQC,IAAI,SAAS,IAIrBC,EAAiB,CACrBtB,MAAO,CACLI,KAAM,SACNa,KAAM,sBAERZ,OAAQ,CACNkB,MAAQJ,GAAMC,QAAQC,IAAI,iCAI9B,MAAMG,UAA2B7B,EAAA8B,MAC/BC,YAAYC,GACVC,MAAM/B,EAA4B8B,E,EAyBK,IAAIH,EArBrB,CACxBxB,MAAO,CACL6B,WAAY,IAAI,EAAAC,EAAAC,SAAQf,GACxBgB,cAAe,IAAI,EAAAC,EAAAC,YAAWZ,GAC9Ba,OAAQpC,EAAmBqC,KAAKC,GAAe,IAAI,EAAAC,EAAAC,OAAMF,MAE3DhC,OAAQ,CACNa,OAAOC,GACLA,EAAEqB,iBACF7B,KAAK8B,uBAAuBN,OAAOO,SAASC,IAC1C,MAAMC,EAAyBD,EAAME,WACrCzB,QAAQ0B,MACNjC,EAAUkC,SACRH,EAAuB1C,cACvB0C,EAAuBzC,YAE1B,G,KE7JmB6C,UAAU","sources":["src/layout/registration/Registration.ts","src/layout/registration/registration.tmpl.ts","src/registration.ts"],"sourcesContent":["import { Block } from \"../../utils/framework/block\";\nimport { registrationLayoutTemplate } from \"./registration.tmpl\";\nimport { Input } from \"../../components/input\";\nimport { Validator } from \"../../utils/helpers/validator/validator\";\nimport { MainBtn } from \"../../components/btns/mainBtn\";\nimport { DefaultBtn } from \"../../components/btns/defaultBtn\";\nimport { loginAndPasswordValidationHandle } from \"../login/Login\";\n\nconst registrationInputs = [\n  {\n    state: {\n      labelName: \"Почта\",\n      validatorName: \"email\",\n      inputValue: \"Email\",\n      type: \"text\",\n    },\n    events: {\n      blur({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"email\");\n      },\n      focus({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"email\");\n      },\n    },\n  },\n  {\n    state: {\n      labelName: \"Логин\",\n      validatorName: \"login\",\n\n      inputValue: \"Логин\",\n      type: \"text\",\n    },\n    events: {\n      blur({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"login\");\n      },\n      focus({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"login\");\n      },\n    },\n  },\n  {\n    state: {\n      labelName: \"Имя\",\n      validatorName: \"firstName\",\n      inputValue: \"Имя\",\n      type: \"text\",\n    },\n    events: {\n      blur({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"firstName\");\n      },\n      focus({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"firstName\");\n      },\n    },\n  },\n  {\n    state: {\n      labelName: \"Фамилия\",\n      validatorName: \"secondName\",\n      inputValue: \"Email\",\n      type: \"text\",\n    },\n    events: {\n      blur({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"secondName\");\n      },\n      focus({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"secondName\");\n      },\n    },\n  },\n  {\n    state: {\n      labelName: \"Телефон\",\n      validatorName: \"phone\",\n      inputValue: \"Email\",\n      type: \"text\",\n    },\n    events: {\n      blur({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"phone\");\n      },\n      focus({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"phone\");\n      },\n    },\n  },\n  {\n    state: {\n      labelName: \"Пароль\",\n      validatorName: \"password\",\n      inputValue: \"Email\",\n      type: \"password\",\n    },\n    events: {\n      blur({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"password\");\n      },\n      focus({ target }) {\n        loginAndPasswordValidationHandle.call(this, target, \"password\");\n      },\n    },\n  },\n  {\n    state: {\n      labelName: \"Пароль (ещё раз)\",\n      validatorName: \"password\",\n      inputValue: \"Email\",\n      type: \"password\",\n    },\n  },\n];\nconst validator = new Validator();\nconst mainBtnData = {\n  state: {\n    type: \"submit\",\n    text: \"Enter\",\n  },\n  events: {\n    submit: (e) => {\n      console.log(\"Submit\");\n    },\n  },\n};\nconst defaultBtnData = {\n  state: {\n    type: \"button\",\n    text: \"Not register yet ?\",\n  },\n  events: {\n    click: (e) => console.log(\"Пользователь нажал на войти\"),\n  },\n};\n\nclass RegistrationLayout extends Block {\n  constructor(props) {\n    super(registrationLayoutTemplate, props);\n  }\n}\n\nconst registrationProps = {\n  state: {\n    MainButton: new MainBtn(mainBtnData),\n    DefaultButton: new DefaultBtn(defaultBtnData),\n    inputs: registrationInputs.map((inputState) => new Input(inputState)),\n  },\n  events: {\n    submit(e) {\n      e.preventDefault();\n      this.getComponentChildren().inputs.forEach((login) => {\n        const currentLoginInputState = login.getState();\n        console.error(\n          validator.validate(\n            currentLoginInputState.validatorName,\n            currentLoginInputState.inputValue\n          )\n        );\n      });\n    },\n  },\n};\nexport const RegistrationLayoutComponent = new RegistrationLayout(\n  registrationProps\n);\n","import \"./registration.scss\";\nimport { Template } from \"../../utils/framework/templateEngine/template\";\n\nexport const registrationLayoutTemplate = new Template(`\n    <div class=\"registration\">\n             <div class=\"registration_container\">\n             <h1 class=\"registration_title\">Регистрация</h1>\n            <form class=\"registration_form\">\n                {{!inputs!}}\n                <div class=\"registration_buttons\">\n                    {{!MainButton!}}\n                    {{!DefaultButton!}}\n                </div>\n            </form> \n            </div>\n             \n        </div>\n`);\n","import {RegistrationLayoutComponent} from \"./layout/registration\";\n\nRegistrationLayoutComponent.renderDom(\"#REGISTRATION\");\n"],"names":["$kOSfN","parcelRequire","$de03719e2eec756f$export$b788084d4c318a26","Template","$ed9c198059cb669b$var$registrationInputs","state","labelName","validatorName","inputValue","type","events","blur","target","$1blh4","loginAndPasswordValidationHandle","call","this","focus","$ed9c198059cb669b$var$validator","$5G1AW","Validator","$ed9c198059cb669b$var$mainBtnData","text","submit","e","console","log","$ed9c198059cb669b$var$defaultBtnData","click","$ed9c198059cb669b$var$RegistrationLayout","Block","constructor","props","super","MainButton","$2XXZC","MainBtn","DefaultButton","$av0la","DefaultBtn","inputs","map","inputState","$hGjuS","Input","preventDefault","getComponentChildren","forEach","login","currentLoginInputState","getState","error","validate","renderDom"],"version":3,"file":"registration.0d0b21ee.js.map","sourceRoot":"../"}